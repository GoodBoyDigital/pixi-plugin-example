{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/PictureRenderer.js","src/PictureShader.js","src/PictureSprite.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiPicture","min","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","PictureRenderer","renderer","PIXI","ObjectRenderer","PictureShader","glCore","prototype","Object","create","constructor","onContextChange","gl","quad","Quad","normalShader","initVao","_tempClamp","Float32Array","_tempColor","start","flush","render","sprite","texture","valid","_renderNormal","shader","bindShader","state","setBlendMode","blendMode","uvs","_uvs","vertices","vertexData","x0","y0","x1","y1","x2","y2","x3","y3","upload","frame","base","baseTexture","clamp","x","width","realWidth","y","height","uniforms","uTextureClamp","color","utils","hex2rgb","tint","alpha","worldAlpha","uColor","bindTexture","draw","WebGLRenderer","registerPlugin","Shader","bind","PictureSprite","Sprite","_renderWebGL","calculateVertices","setObjectRenderer","plugins","picture","myPlugin","assign","extras"],"mappings":";;;;;;;CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,cAAAL,EAAAK,iBAAAC,IAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAlB,EAAAD,GCYA,QAAA2B,GAAAC,GACAC,KAAAC,eAAAN,KAAAhB,KAAAoB,GAbA,GAAAG,GAAAZ,EAAA,kBACAU,MAAAG,MAeAL,GAAAM,UAAAC,OAAAC,OAAAN,KAAAC,eAAAG,WACAN,EAAAM,UAAAG,YAAAT,EAEAA,EAAAM,UAAAI,gBAAA,WACA,GAAAC,GAAA9B,KAAAoB,SAAAU,EACA9B,MAAA+B,KAAA,GAAAV,MAAAW,KAAAF,GACA9B,KAAAiC,aAAA,GAAAV,GAAAO,GACA9B,KAAA+B,KAAAG,QAAAlC,KAAAiC,cACAjC,KAAAmC,WAAA,GAAAC,cAAA,GACApC,KAAAqC,WAAA,GAAAD,cAAA,IAGAjB,EAAAM,UAAAa,MAAA,aAIAnB,EAAAM,UAAAc,MAAA,aASApB,EAAAM,UAAAe,OAAA,SAAAC,GACAA,EAAAC,QAAAC,OAKA3C,KAAA4C,cAAAH,EAAAzC,KAAAiC,eAGAd,EAAAM,UAAAmB,cAAA,SAAAH,EAAAI,GACA,GAAAzB,GAAApB,KAAAoB,QACAA,GAAA0B,WAAAD,GACAzB,EAAA2B,MAAAC,aAAAP,EAAAQ,UAMA,KAAA,GALAlB,GAAA/B,KAAA+B,KACAmB,EAAAT,EAAAC,QAAAS,KAIAvC,GADAmB,EAAAqB,SACA,GAAAxC,EAAA,EAAAA,IACAmB,EAAAqB,SAAAxC,GAAA6B,EAAAY,WAAAzC,EAKAmB,GAAAmB,IAAA,GAAAA,EAAAI,GACAvB,EAAAmB,IAAA,GAAAA,EAAAK,GACAxB,EAAAmB,IAAA,GAAAA,EAAAM,GACAzB,EAAAmB,IAAA,GAAAA,EAAAO,GACA1B,EAAAmB,IAAA,GAAAA,EAAAQ,GACA3B,EAAAmB,IAAA,GAAAA,EAAAS,GACA5B,EAAAmB,IAAA,GAAAA,EAAAU,GACA7B,EAAAmB,IAAA,GAAAA,EAAAW,GAGA9B,EAAA+B,QAEA,IAAAC,GAAAtB,EAAAC,QAAAqB,MACAC,EAAAvB,EAAAC,QAAAuB,YACAC,EAAAlE,KAAAmC,UAGA+B,GAAA,GAAAH,EAAAI,EAAAH,EAAAI,MAAA,GAAAJ,EAAAK,UACAH,EAAA,GAAAH,EAAAO,EAAAN,EAAAO,OAAA,GAAAP,EAAAK,UACAH,EAAA,IAAAH,EAAAI,EAAAJ,EAAAK,OAAAJ,EAAAI,MAAA,GAAAJ,EAAAK,UACAH,EAAA,IAAAH,EAAAO,EAAAP,EAAAQ,QAAAP,EAAAO,OAAA,GAAAP,EAAAK,UAGAxB,EAAA2B,SAAAC,cAAAP,CAEA,IAAAQ,GAAA1E,KAAAqC,UACAhB,MAAAsD,MAAAC,QAAAnC,EAAAoC,KAAAH,EACA,IAAAI,GAAArC,EAAAsC,UAGAL,GAAA,IAAAI,EACAJ,EAAA,IAAAI,EACAJ,EAAA,IAAAI,EACAJ,EAAA,GAAAI,EACAjC,EAAA2B,SAAAQ,OAAAN,EAGAtD,EAAA6D,YAAAjB,EAAA,GACAjC,EAAAmD,QAGA7D,KAAA8D,cAAAC,eAAA,UAAAjE,GAEA1B,EAAAD,QAAA2B,6CCpGA,QAAAI,GAAAO,GAEAT,KAAAgE,OAAArE,KAAAhB,KACA8B,EACA,mUACA,mWAIA9B,KAAAsF,OAGAtF,KAAAwE,SAAAQ,OAAA,GAAA5C,cAAA,EAAA,EAAA,EAAA,GAGAb,EAAAE,UAAAC,OAAAC,OAAAN,KAAAgE,OAAA5D,WACAF,EAAAE,UAAAG,YAAAL,EACA9B,EAAAD,QAAA+B,0BCjBA,QAAAgE,GAAA7C,GAEArB,KAAAmE,OAAAxE,KAAAhB,KAAA0C,GAGA6C,EAAA9D,UAAAC,OAAAC,OAAAN,KAAAmE,OAAA/D,WACA8D,EAAA9D,UAAAG,YAAA2D,EACA9F,EAAAD,QAAA+F,EAQAA,EAAA9D,UAAAgE,aAAA,SAAArE,GAEApB,KAAA0F,oBAEAtE,EAAAuE,kBAAAvE,EAAAwE,QAAAC,SACAzE,EAAAwE,QAAAC,QAAArD,OAAAxC,+BC5BA,GAAA8F,IACAP,cAAA5E,EAAA,mBACAQ,gBAAAR,EAAA,qBAKAe,QAAAqE,OAAA1E,KAAA2E,OAAAF,GAEArG,EAAAD,QAAAsG","file":"pixi-picture.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var PictureShader = require('./PictureShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * Renderer that clamps the texture so neighbour frames wont bleed on it\r\n * immitates context2d drawImage behaviour\r\n *\r\n * @class\r\n * @memberof PIXI.extras\r\n * @extends PIXI.ObjectRenderer\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this plugin works for\r\n */\r\nfunction PictureRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n}\r\n\r\nPictureRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nPictureRenderer.prototype.constructor = PictureRenderer;\r\n\r\nPictureRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    this.quad = new PIXI.Quad(gl);\r\n    this.normalShader = new PictureShader(gl);\r\n    this.quad.initVao(this.normalShader);\r\n    this._tempClamp = new Float32Array(4);\r\n    this._tempColor = new Float32Array(4);\r\n};\r\n\r\nPictureRenderer.prototype.start = function() {\r\n    //noop\r\n};\r\n\r\nPictureRenderer.prototype.flush = function() {\r\n    //noop\r\n};\r\n\r\n/**\r\n * Renders the picture object.\r\n *\r\n * @param sprite {PIXI.tilemap.PictureSprite} the picture to render\r\n */\r\nPictureRenderer.prototype.render = function(sprite) {\r\n    if (!sprite.texture.valid) {\r\n        return;\r\n    }\r\n    //you can add different render modes here\r\n    //multiple shaders and stuff\r\n    this._renderNormal(sprite, this.normalShader);\r\n};\r\n\r\nPictureRenderer.prototype._renderNormal = function(sprite, shader) {\r\n    var renderer = this.renderer;\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(sprite.blendMode);\r\n    var quad = this.quad;\r\n    var uvs = sprite.texture._uvs;\r\n\r\n    //sprite already has calculated the vertices. lets transfer them to quad\r\n    var vertices = quad.vertices;\r\n    for (var i=0;i<8;i++) {\r\n        quad.vertices[i] = sprite.vertexData[i];\r\n    }\r\n\r\n    //SpriteRenderer works differently, with uint32 UVS\r\n    //but for our demo float uvs are just fine\r\n    quad.uvs[0] = uvs.x0;\r\n    quad.uvs[1] = uvs.y0;\r\n    quad.uvs[2] = uvs.x1;\r\n    quad.uvs[3] = uvs.y1;\r\n    quad.uvs[4] = uvs.x2;\r\n    quad.uvs[5] = uvs.y2;\r\n    quad.uvs[6] = uvs.x3;\r\n    quad.uvs[7] = uvs.y3;\r\n\r\n    //TODO: add baricentric coords here\r\n    quad.upload();\r\n\r\n    var frame = sprite.texture.frame;\r\n    var base = sprite.texture.baseTexture;\r\n    var clamp = this._tempClamp;\r\n    //clamping 0.5 pixel from each side to reduce border artifact\r\n    //this is our plugin main purpose\r\n    clamp[0] = frame.x / base.width + 0.5 / base.realWidth;\r\n    clamp[1] = frame.y / base.height + 0.5 / base.realWidth;\r\n    clamp[2] = (frame.x + frame.width) / base.width - 0.5 / base.realWidth;\r\n    clamp[3] = (frame.y + frame.height) / base.height - 0.5 / base.realWidth;\r\n    //take a notice that size in pixels is realWidth,realHeight\r\n    //width and height are divided by resolution\r\n    shader.uniforms.uTextureClamp = clamp;\r\n\r\n    var color = this._tempColor;\r\n    PIXI.utils.hex2rgb(sprite.tint, color);\r\n    var alpha = sprite.worldAlpha;\r\n    //premultiplied alpha tint\r\n    //of course we could do that in shader too\r\n    color[0] *= alpha;\r\n    color[1] *= alpha;\r\n    color[2] *= alpha;\r\n    color[3] = alpha;\r\n    shader.uniforms.uColor = color;\r\n\r\n    //bind texture to unit 0, our default sampler unit\r\n    renderer.bindTexture(base, 0);\r\n    quad.draw();\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\r\n\r\nmodule.exports = PictureRenderer;\r\n","\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n */\r\nfunction PictureShader(gl)\r\n{\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 sample = texture2D(uSampler, textureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\"\r\n    );\r\n    //do some stuff, like default values for shader\r\n    //dont forget to bind it if you really are changing the uniforms\r\n    this.bind();\r\n    //default tint\r\n    //Its an example, actually PictureRenderer takes care of this stuff\r\n    this.uniforms.uColor = new Float32Array(1,1,1,1);\r\n}\r\n\r\nPictureShader.prototype = Object.create(PIXI.Shader.prototype);\r\nPictureShader.prototype.constructor = PictureShader;\r\nmodule.exports = PictureShader;\r\n","/**\r\n * A Sprite with reduced border artifacts\r\n *\r\n * @class\r\n * @extends PIXI.Sprite\r\n * @memberof PIXI.tilemap\r\n * @param texture {PIXI.Texture} the texture for this sprite\r\n */\r\nfunction PictureSprite(texture)\r\n{\r\n    PIXI.Sprite.call(this, texture);\r\n}\r\n\r\nPictureSprite.prototype = Object.create(PIXI.Sprite.prototype);\r\nPictureSprite.prototype.constructor = PictureSprite;\r\nmodule.exports = PictureSprite;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @param renderer {PIXI.WebGLRenderer}\r\n * @private\r\n */\r\nPictureSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    this.calculateVertices();\r\n\r\n    renderer.setObjectRenderer(renderer.plugins.picture);\r\n    renderer.plugins.picture.render(this);\r\n};\r\n","var myPlugin = {\r\n    PictureSprite: require('./PictureSprite'),\r\n    PictureRenderer: require('./PictureRenderer')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.extras, myPlugin);\r\n\r\nmodule.exports = myPlugin;\r\n"],"sourceRoot":"/source/"}