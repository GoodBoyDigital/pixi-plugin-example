{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/PictureRenderer.js","src/PictureShader.js","src"],"names":[],"mappingsvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-picture.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var PictureShader = require('./PictureShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * Renderer that clamps the texture so neighbour frames wont bleed on it\r\n * immitates context2d drawImage behaviour\r\n *\r\n * @class\r\n * @memberof PIXI.extras\r\n * @extends PIXI.ObjectRenderer\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this plugin works for\r\n */\r\nfunction PictureRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n}\r\n\r\nPictureRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nPictureRenderer.prototype.constructor = PictureRenderer;\r\n\r\nPictureRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    this.quad = new PIXI.Quad(gl);\r\n    this.normalShader = new PictureShader(gl);\r\n    this.quad.initVao(this.normalShader);\r\n    this._tempClamp = new Float32Array(4);\r\n    this._tempColor = new Float32Array(4);\r\n};\r\n\r\nPictureRenderer.prototype.start = function() {\r\n    //noop\r\n};\r\n\r\nPictureRenderer.prototype.flush = function() {\r\n    //noop\r\n};\r\n\r\n/**\r\n * Renders the picture object.\r\n *\r\n * @param sprite {PIXI.tilemap.PictureSprite} the picture to render\r\n */\r\nPictureRenderer.prototype.render = function(sprite) {\r\n    if (!sprite.texture.valid) {\r\n        return;\r\n    }\r\n    //you can add different render modes here\r\n    //multiple shaders and stuff\r\n    this._renderNormal(sprite, this.normalShader);\r\n};\r\n\r\nPictureRenderer.prototype._renderNormal = function(sprite, shader) {\r\n    var renderer = this.renderer;\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(sprite.blendMode);\r\n    var quad = this.quad;\r\n    renderer.bindVao(quad.vao);\r\n    var uvs = sprite.texture._uvs;\r\n\r\n    //sprite already has calculated the vertices. lets transfer them to quad\r\n    var vertices = quad.vertices;\r\n    for (var i=0;i<8;i++) {\r\n        quad.vertices[i] = sprite.vertexData[i];\r\n    }\r\n\r\n    //SpriteRenderer works differently, with uint32 UVS\r\n    //but for our demo float uvs are just fine\r\n    quad.uvs[0] = uvs.x0;\r\n    quad.uvs[1] = uvs.y0;\r\n    quad.uvs[2] = uvs.x1;\r\n    quad.uvs[3] = uvs.y1;\r\n    quad.uvs[4] = uvs.x2;\r\n    quad.uvs[5] = uvs.y2;\r\n    quad.uvs[6] = uvs.x3;\r\n    quad.uvs[7] = uvs.y3;\r\n\r\n    //TODO: add baricentric coords here\r\n    quad.upload();\r\n\r\n    var frame = sprite.texture.frame;\r\n    var base = sprite.texture.baseTexture;\r\n    var clamp = this._tempClamp;\r\n    //clamping 0 pixel from left-top side and 1 from top-bottom to reduce border artifact\r\n    //this is our plugin main purpose\r\n    clamp[0] = frame.x / base.width;\r\n    clamp[1] = frame.y / base.height;\r\n    clamp[2] = (frame.x + frame.width) / base.width - 1.0 / base.realWidth;\r\n    clamp[3] = (frame.y + frame.height) / base.height - 1.0 / base.realWidth;\r\n    //take a notice that size in pixels is realWidth,realHeight\r\n    //width and height are divided by resolution\r\n    shader.uniforms.uTextureClamp = clamp;\r\n\r\n    var color = this._tempColor;\r\n    PIXI.utils.hex2rgb(sprite.tint, color);\r\n    var alpha = sprite.worldAlpha;\r\n    //premultiplied alpha tint\r\n    //of course we could do that in shader too\r\n    color[0] *= alpha;\r\n    color[1] *= alpha;\r\n    color[2] *= alpha;\r\n    color[3] = alpha;\r\n    shader.uniforms.uColor = color;\r\n\r\n    // there are two ways of binding a texture in pixi-v4\r\n\r\n    // force texture in unit 0\r\n    renderer.bindTexture(base, 0, true);\r\n\r\n    // \"SMART\" binding, can be a bit faster\r\n    // shaders.uniforms.uSampler = renderer.bindTexture(base);\r\n\r\n    quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\r\n};\r\n\r\n// render sprite with our stuff\r\nPIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\r\n// fallback for canvas, old one\r\nPIXI.CanvasRenderer.registerPlugin('picture', PIXI.CanvasSpriteRenderer);\r\n\r\nmodule.exports = PictureRenderer;\r\n","\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n */\r\nfunction PictureShader(gl)\r\n{\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 sample = texture2D(uSampler, textureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\"\r\n    );\r\n    //do some stuff, like default values for shader\r\n    //dont forget to bind it if you really are changing the uniforms\r\n    this.bind();\r\n    //default tint\r\n    //Its an example, actually PictureRenderer takes care of this stuff\r\n    this.uniforms.uColor = new Float32Array(1,1,1,1);\r\n}\r\n\r\nPictureShader.prototype = Object.create(PIXI.Shader.prototype);\r\nPictureShader.prototype.constructor = PictureShader;\r\nmodule.exports = PictureShader;\r\n","var myPlugin = {\r\n    PictureRenderer: require('./PictureRenderer')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.extras, myPlugin);\r\n\r\nmodule.exports = myPlugin;\r\n"],"sourceRoot":"."}